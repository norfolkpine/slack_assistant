import os
from dotenv import load_dotenv
from slack_sdk.web import WebClient
from slack_sdk.socket_mode import SocketModeClient
from slack_sdk.socket_mode.response import SocketModeResponse
from slack_sdk.socket_mode.request import SocketModeRequest

from agno.agent import Agent, RunResponse
from agno.tools.slack import SlackTools
from agno.models.openai import OpenAIChat
from agno.utils.pprint import pprint_run_response
from agno.tools.jira import JiraTools

# === Load environment ===
load_dotenv()
SLACK_BOT_TOKEN = os.getenv("SLACK_BOT_TOKEN")  # xoxb-...
SLACK_APP_TOKEN = os.getenv("SLACK_APP_TOKEN")  # xapp-...
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")  # xapp-...

# === Slack SDK Setup ===
web_client = WebClient(token=SLACK_BOT_TOKEN)
client = SocketModeClient(app_token=SLACK_APP_TOKEN, web_client=web_client)

# Fetch bot user ID dynamically from Slack
response = web_client.auth_test()
BOT_USER_ID = response["user_id"]

# === Agent Setup ===
slack_tools = SlackTools()
jira_tools = JiraTools()

agent = Agent(
    name="Reggie",
    model=OpenAIChat(id="gpt-4o"),
    tools=[slack_tools, jira_tools],
    show_tool_calls=True,
    instructions="If translating, return only the translated text."
)

# === Subscription Check (stubbed function) ===
def has_valid_subscription(team_id: str) -> bool:
    VALID_TEAM_IDS = {"T06LP8F3K8V", "T87654321"}  # Example placeholder
    return team_id in VALID_TEAM_IDS

# === Process Slack Events ===
def process(client: SocketModeClient, req: SocketModeRequest):
    print("📥 Incoming request:", req.type)

    if req.type == "events_api":
        handle_event(req)
    elif req.type == "slash_commands":
        handle_slash_command(req)
    elif req.type == "interactive":
        handle_interactive(req)
    
    # Acknowledge the event
    client.send_socket_mode_response(SocketModeResponse(envelope_id=req.envelope_id))

# === Handle App Mentions ===
def handle_event(req: SocketModeRequest):
    event = req.payload.get("event", {})
    event_type = event.get("type")
    channel_type = event.get("channel_type")
    user = event.get("user")
    text = event.get("text")
    channel = event.get("channel")

    print(f"🔍 Event Type: {event_type} | Channel Type: {channel_type}")
    print(f"👤 User: {user}")
    print(f"💬 Message: {text}")
    print(f"📡 Channel: {channel}")

    if not text or not channel or not user:
        print("⚠️ Incomplete event, skipping.")
        return

    # === Check for app mentions ===
    if event_type == "app_mention":
        # When the bot is mentioned in a message
        bot_user_id = req.payload["authorizations"][0]["user_id"]
        mention = f"<@{bot_user_id}>"
        cleaned_text = text.replace(mention, "").strip()

        print(f"👤 Bot Mention Detected: {cleaned_text}")
        
        # Now process the text after removing the bot mention
        prompt = cleaned_text if cleaned_text else "How can I assist you?"
        
        try:
            print("\n🧠 Running agent with prompt:")
            print("⏳ Waiting for response...\n")

            # Run the agent
            response: RunResponse = agent.run(prompt)

            final_text = f">From: <@{user}>\n>{text.strip()}\n```\n{response.content.strip()}\n```"
            print(f"📤 Response: {final_text}")

            # Strip bot user mention from the final message text
            final_text = final_text.replace(f"<@{BOT_USER_ID}>", "").strip()

            # Send the response to Slack
            client.web_client.chat_postMessage(
                channel=channel,
                text=final_text
            )

        except Exception as e:
            print(f"❌ Error processing app mention: {e}")
            client.web_client.chat_postMessage(
                channel=channel,
                text="⚠️ Sorry, something went wrong while processing your request."
            )

# === Handle Slash Commands ===
def handle_slash_command(req: SocketModeRequest):
    # Extract slash command payload
    command = req.payload.get("command")
    text = req.payload.get("text")  # The text part after the slash command
    user_id = req.payload.get("user_id")
    channel_id = req.payload.get("channel_id")

    print(f"Received slash command: {command}")
    print(f"Command text: {text}")

    if command == "/indo":
        # Translate the text (remove '/indo' and translate the rest)
        text_to_translate = text.strip()
        prompt = f"Translate this message to Indonesian: {text_to_translate}"

        try:
            # Run the agent to get the translation
            response: RunResponse = agent.run(prompt)
            translation = response.content.strip()

            # Send back the translated text to Slack
            final_text = f"From: <@{user_id}>\nOriginal: {text}\n\nTranslated: {translation}"

            web_client.chat_postMessage(
                channel=channel_id,
                text=final_text
            )
        except Exception as e:
            print(f"❌ Error processing slash command: {e}")
            web_client.chat_postMessage(
                channel=channel_id,
                text="⚠️ Sorry, something went wrong while processing your translation request."
            )

# === Register and Connect ===
client.socket_mode_request_listeners.append(process)
print("🚀 Connecting to Slack via Socket Mode...")
client.connect()

# === Keep alive ===
from threading import Event
Event().wait()
